{"version":3,"file":"component---src-templates-post-template-tsx-15f79642c5a790ea0d24.js","mappings":"qKAEA,IAoBA,GApBc,E,QAAA,yX,oBCwBd,EAlB2D,YAEvD,IADFA,EACC,EADDA,WAEA,OACEC,EAAAA,EAAAA,IAAAA,MAAAA,KAEID,EAAWE,KAAI,SAACC,GACd,OACEF,EAAAA,EAAAA,IAACG,EAAD,CAAUC,IAAKF,IACbF,EAAAA,EAAAA,IAACK,EAAAA,KAAD,CAAMC,GAAE,aAAeJ,GAAaA,U,yFCf3C,IAAMK,GAAO,2+C,UCepB,EARyD,YAErD,IADFC,EACC,EADDA,KAEA,OACER,EAAAA,EAAAA,IAACO,EAAD,CAASE,wBAAyB,CAAEC,OAAQF,M,UCXzC,IAAMG,GAAY,6JAQZC,GAAc,4HAMdC,GAAW,oH,UCcxB,EAfyD,YAErD,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMhB,EACZ,EADYA,WAAYiB,EACxB,EADwBA,WAEzB,OACEhB,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAACW,EAAD,KAAeG,IACfd,EAAAA,EAAAA,IAACY,EAAD,MACEZ,EAAAA,EAAAA,IAACa,EAAD,KAAcE,EAAd,MAA8BC,EAA9B,cACAhB,EAAAA,EAAAA,IAACiB,EAAAA,EAAD,CAAclB,WAAYA,MAE5BC,EAAAA,EAAAA,IAAAA,KAAAA,Q,UCtBC,IAAMkB,GAAmB,OAAOC,EAAAA,EAAP,qBAAHC,CAAAA,KAAAA,UAAAA,OAAAA,6CCW7B,EANqD,YAEjD,IADFC,EACC,EADDA,UAEA,OAAOrB,EAAAA,EAAAA,IAACkB,EAAD,CAAkBI,MAAOD,EAAWE,IAAI,gBCgCjD,EA5BmC,WACjC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAuB,MAAnBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAsC,CAC1CC,IAZM,gCAaNC,KAZO,0BAaP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBpC,EAAgB,KAAXqC,EAAW,KACnDb,EAAWc,aAAatC,EAAKqC,MAG/BjB,EAAQG,QAAQgB,YAAYf,MAC3B,KAEI5B,EAAAA,EAAAA,IAAAA,MAAAA,CAAK4C,IAAKpB,KCgCnB,EAvD2D,YAMvD,IACF,EADC,EALDqB,KACEC,kBACEC,MAiBM,GAZRC,KACExC,EAFJ,EAEIA,KAFJ,IAGIyC,YACEnC,EAJN,EAIMA,MACAC,EALN,EAKMA,KACAhB,EANN,EAMMA,WAEqBmD,EAR3B,EAOMC,UACEC,gBAAmBF,gBAGvBlC,EAXJ,EAWIA,WAIJ,OACEhB,EAAAA,EAAAA,IAACqD,EAAAA,EAAD,CAAQvC,MAAOA,IACbd,EAAAA,EAAAA,IAACsD,EAAD,CAAWjC,UAAW6B,KACtBlD,EAAAA,EAAAA,IAACuD,EAAD,CAAazC,MAAOA,EAAOC,KAAMA,EAAMhB,WAAYA,EAAYiB,WAAYA,KAC3EhB,EAAAA,EAAAA,IAACwD,EAAD,CAAahD,KAAMA,KACnBR,EAAAA,EAAAA,IAAAA,KAAAA,OACAA,EAAAA,EAAAA,IAACyD,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/CategoryList.style.tsx","webpack://gatsby-starter-default/./src/components/Post/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.style.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/Description.style.tsx","webpack://gatsby-starter-default/./src/components/Post/Description.tsx","webpack://gatsby-starter-default/./src/components/Post/PostImage.style.tsx","webpack://gatsby-starter-default/./src/components/Post/PostImage.tsx","webpack://gatsby-starter-default/./src/components/Post/Comment.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\n\nconst Category = styled.span`\n  margin-right: 0.6rem;\n  margin-bottom: 0.6rem;\n  text-transform: uppercase;\n  font-size: var(--size-300);\n\n  & a {\n    position: relative;\n    background-color: rgba(255, 255, 255, 0.7);\n    padding: 0.2rem 0.6rem;\n    border: 1px solid rgba(230, 230, 230, 1);\n    border-radius: 4px;\n  }\n\n  & a:hover {\n    background-color: rgba(237, 85, 110, 0.7);\n    color: rgba(255, 255, 255, 1);\n  }\n`;\n\nexport default Category","import React, { FunctionComponent } from 'react'\nimport Category from './CategoryList.style'\nimport { Link } from 'gatsby'\n\ntype CategoryListProps = {\n  categories: string[]\n}\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  categories\n}) {\n  return (\n    <div>\n      {\n        categories.map((category: string) => {\n          return (\n            <Category key={category}>\n              <Link to={`/category/${category}`}>{category}</Link>\n            </Category>\n          );\n        })\n      }\n    </div>\n  )\n}\n\nexport default CategoryList","import styled from '@emotion/styled'\n\nexport const Content = styled.div`\n  margin: 0 auto;\n  padding: 2.5rem 0;\n  word-wrap: break-word;\n\n  h1 {\n    font-size: var(--size-600);\n  }\n\n  h2 {\n    font-size: var(--size-500);\n  }\n\n  h3 {\n    font-size: var(--size-400);\n  }\n\n  * + h1 {\n    margin-top: var(--size-900);\n  }\n\n  * + h2 {\n    margin-top: var(--size-800);\n  }\n\n  * + h3 {\n    margin-top: var(--size-700);\n  }\n\n  p {\n    font-size: var(--size-350);\n    margin: var(--size-400) 0;\n  }\n\n  ol,\n  ul {\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0 0 0 3rem;\n\n    p {\n      margin: 0.5rem 0;\n    }\n  }\n\n  ul {\n    list-style-type: disc;\n    font-size: var(--size-350);\n  }\n\n  ul ul {\n    list-style-type: circle;\n  }\n\n  ul ul ul {\n    list-style-type: square;\n  }\n\n  ol {\n    list-style-type: decimal;\n  }\n\n  hr {\n    margin: 2rem 0;\n  }\n\n  a {\n    font-weight: 700;\n  }\n\n  a:active,\n  a:hover {\n    outline-width: 0;\n  }\n\n  strong {\n    font-weight: 700;\n  }\n\n  img {\n    width: 100%;\n    border-style: none;\n    border-radius: var(--size-400);\n  }\n\n  em {\n    font-size: 1.2rem;\n    font-style: italic;\n    display: block;\n    text-align: center;\n    margin: -1.5rem auto 0;\n    word-break: keep-all;\n  }\n\n  table {\n    display: table;\n    border-collapse: collapse;\n    margin: var(--size-400) 0;\n  }\n\n  thead {\n    display: table-header-group;\n    font-weight: 700;\n  }\n\n  tr {\n    display: table-row;\n  }\n\n  th,\n  td {\n    display: table-cell;\n    padding: var(--size-400);\n  }\n\n  blockquote {\n    margin: 0.7rem 0;\n    padding: 0.5rem 1.5rem;\n    background: rgb(242, 242, 242);\n\n    p {\n      margin: 0.5rem 0;\n    }\n  }\n\n  code {\n    margin: 0px 0.2rem 0px 0px;\n    padding: 0.2rem 0.3rem;\n    border-radius: 0.3rem;\n    background: rgb(230, 230, 230);\n    font-size: 95%;\n    font-family: 'Poppins', -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue,\n    helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n  }\n\n  mark {\n    background-color: rgba(251, 238, 184, 1);\n    padding: 0.1rem;\n  }\n\n  @media (max-width: 55rem) {\n    width: 100%;\n    padding: 1.5rem 0;\n  }\n`;","import React, { FunctionComponent } from 'react'\nimport {\n  Content\n} from './PostContent.style'\n\ntype PostContentProps = {\n  html: string\n}\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({\n  html\n}) {\n  return (\n    <Content dangerouslySetInnerHTML={{ __html: html }}/>\n  )\n}\n\nexport default PostContent;","import styled from '@emotion/styled'\n\nexport const ContentTitle = styled.h1`\n  word-break: keep-all;\n  font-size: var(--size-600);\n  font-weight: 600;\n  padding: 1.5rem 0;\n  line-height: 130%;\n`\n\nexport const ContentDetails = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const ContentDate = styled.span`\n  font-size: var(--size-350);\n  color: rgba(98, 92, 96, 0.7);\n`","import React, { FunctionComponent } from 'react'\nimport {\n  ContentTitle,\n  ContentDetails,\n  ContentDate,\n} from './Description.style'\nimport CategoryList from 'components/Post/CategoryList'\n\ntype DescriptionProps = {\n  title: string\n  date: string\n  categories: string[]\n  timeToRead: number\n}\n\nconst Description: FunctionComponent<DescriptionProps> = function ({\n  title, date, categories, timeToRead\n}) {\n  return (\n    <>\n      <ContentTitle>{title}</ContentTitle>\n      <ContentDetails>\n        <ContentDate>{date} &middot; {timeToRead} min read</ContentDate>\n        <CategoryList categories={categories} />\n      </ContentDetails>\n      <hr />\n    </>\n  )\n}\n\nexport default Description","import styled from '@emotion/styled'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nexport const PostImageWrapper = styled(GatsbyImage)`\n  width: 100%;\n  height: 100%;\n  border-radius: 8px;\n`","import React, { FunctionComponent } from 'react'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { PostImageWrapper } from './PostImage.style'\n\ntype PostImageProps = {\n  postImage: IGatsbyImageData\n}\n\nconst PostImage: FunctionComponent<PostImageProps> = function ({\n  postImage\n}) {\n  return <PostImageWrapper image={postImage} alt=\"Post Image\" />\n}\n\nexport default PostImage","import React, { createRef, FunctionComponent, useEffect } from 'react'\n\ntype UtterancesAttributeType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'heo-it/heo-it.github.io'\n\nconst Comment: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (element.current == null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributeType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <div ref={element} />\n}\n\nexport default Comment","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from 'components/Layout/Layout'\nimport PostContent from 'components/Post/PostContent'\nimport Description from 'components/Post/Description'\nimport PostImage from 'components/Post/PostImage'\nimport Comment from 'components/Post/Comment'\nimport { PostListItemType } from 'types/PostItem.types'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: {\n      edges\n    }\n  }\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n        }\n      },\n      timeToRead\n    },\n  } = edges[0]\n\n  return (\n    <Layout title={title}>\n      <PostImage postImage={gatsbyImageData} />\n      <Description title={title} date={date} categories={categories} timeToRead={timeToRead}/>\n      <PostContent html={html}/>\n      <hr />\n      <Comment />\n    </Layout>\n  )\n}\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            date\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 730)\n              }\n            }\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\nexport default PostTemplate\n"],"names":["categories","___EmotionJSX","map","category","Category","key","Link","to","Content","html","dangerouslySetInnerHTML","__html","ContentTitle","ContentDetails","ContentDate","title","date","timeToRead","CategoryList","PostImageWrapper","GatsbyImage","process","postImage","image","alt","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","node","frontmatter","gatsbyImageData","thumbnail","childImageSharp","Layout","PostImage","Description","PostContent","Comment"],"sourceRoot":""}
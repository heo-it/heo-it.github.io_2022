{
    "componentChunkName": "component---src-templates-category-template-tsx",
    "path": "/category/JavaScript/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"8336a5a5-f2da-562f-8009-c03aca5d240a","fields":{"slug":"/javascript/ES6 구조분해할당/"},"html":"<h1>ES6 - 구조 분해 할당</h1>\n<blockquote>\n<p>Javascript에서 자주 사용하는 배열이나 객체를 변수로 <strong>분해</strong>할 수 있게 해주는 문법에 대해서 정리하였다.</p>\n</blockquote>\n<h2>1. 배열 분해하기</h2>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let arr = [&quot;apple&quot;, &quot;banana&quot;];\n\nlet [first, second] = arr;\n\nconsole.log(first);   // apple\nconsole.log(banana);   // banana</code>\n        </deckgo-highlight-code>\n<h3>쉼표를 사용하여 요소 무시하기</h3>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let [first, , thired] = [&quot;apple&quot;, &quot;banana&quot;, &quot;watermelon&quot;];\n\nconsole.log(first);  // apple\nconsole.log(thired); // watermelon</code>\n        </deckgo-highlight-code>\n<h3>변수 교환 트릭</h3>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let first = &quot;apple&quot;;\nlet second = &quot;banana&quot;;\n\n[first, second] = [second, first];\n\nconsole.log(first, second);  // banana, apple</code>\n        </deckgo-highlight-code>\n<h3>‘…’로 나머지 요소 가져오기</h3>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let [first, second, ...rest] = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;];\n\nconsole.log(first);  // &#39;a&#39;\nconsole.log(second); // &#39;b&#39;\nconsole.log(rest);  // [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]..</code>\n        </deckgo-highlight-code>\n<h3>기본값</h3>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let [fisrt = &quot;apple&quot;, second = &quot;banana&quot;] = [&quot;watermelon&quot;];\n\nconsole.log(first);  // watermelon\nconsole.log(second); // banana</code>\n        </deckgo-highlight-code>\n<h2>2. 객체 분해하기</h2>\n<p>객체 분해의 가장 큰 장점은 객체 순서와 상관없이 저장된 값과 상응하는 변수에 할당 된다는 것이다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let { first, second } = { second: &quot;banana&quot;, first: &quot;apple&quot; };\n\nconsole.log(first, second);  // apple, banana</code>\n        </deckgo-highlight-code>\n<h3>기본값</h3>\n<p>배열과 마찬가지로 선언 시 기본값을 설정할 수 있으며, 표현식 뿐만 아니라 함수 호출을 기본값으로 할당할 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let fruits= {\n\tfirst: &quot;apple&quot;\n};\n\nlet { first = prompt(&#39;apple&#39;), second = prompt(&#39;banana&#39;) } = fruits;\n\nconsole.log(first);  // apple\nconsole.log(second)  // prompt창에 입력된 값</code>\n        </deckgo-highlight-code>\n<h3>‘…’로 나머지 요소 가져오기</h3>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let fruits = {\n\tfirst: &quot;apple&quot;,\n  second: &quot;banana&quot;,\n\tthired: &quot;watermelon&quot;,\n};\n\nlet {first, ...rest} = fruits;\n\nconsole.log(first);        // apple\nconsole.log(rest.second);  // banana\nconsole.log(rest.thired);  // watermelon</code>\n        </deckgo-highlight-code>\n<h2>3. 함수 매개변수</h2>\n<p>함수의 매개변수를 구조 분해하여 받을 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">let fruits = {\n\tfirst: &quot;apple&quot;,\n  second: &quot;banana&quot;,\n\tthired: &quot;watermelon&quot;,\n};\n\nshowFruits ({ first, second, thired}) =&gt; {\n\talret(first);\n\talret(second);\n\talret(thired);\n}\n\nshowFruits(fruits);</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"ES6 구조분해할당","date":"26 Jan, 2022","summary":"ES6의 구조 분해 할당 문법에 대해 정리","categories":["JavaScript"]}}},{"node":{"id":"b63f8515-7752-592c-9dc7-017c6291da03","fields":{"slug":"/javascript/generator 문법/"},"html":"<h1>generator 문법</h1>\n<p>ES6에서 도입된 제너레이터(Generator) 함수는 이터러블을 생성하는 함수이다. 제너레이터 함수를 사용하면 이터레이터 프로토콜을 준수해 이터러블을 생성하는 방식보다 간편하게 이터러블을 구현할 수 있다. 또한 제너레이터 함수는 비동기 처리에 유용하게 사용된다.</p>\n<p>Generator는 빠져나갔다가 나중에 돌아올 수 있는 함수이다. 이때 변수 값은 출입 과정에서 저장된 상태로 남아 있다는 점 기억하기 !!</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">function* generator(i) {\n\tyield i;\n\tyield i + 10;\n}</code>\n        </deckgo-highlight-code>\n<h3>참고</h3>\n<ul>\n<li>MDN Generator</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator\" target=\"_blank\" rel=\"nofollow\">Generator - JavaScript | MDN</a></p>","frontmatter":{"title":"generator 문법","date":"13 Jun, 2022","summary":"제너레이터 함수에 한 정리","categories":["JavaScript"]}}}]}},"pageContext":{"fieldValue":"JavaScript","totalCount":2}},
    "staticQueryHashes": ["3764592887"]}
{
    "componentChunkName": "component---src-templates-category-template-tsx",
    "path": "/category/React/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"50e5208c-a0f8-56db-82ff-aac9841d7933","fields":{"slug":"/react/CSSInReact/"},"html":"<h1>CSS in React</h1>\n<p>React로 개발 중 다양한 css 사용 방법이 존재한다.</p>\n<p>물론 개발자 입장에서 많은 선택지가 있다는게 좋긴 하지만 재사용 여부, 퍼포먼스 등 상황에 따라 올바르게 사용하기 위해 특징에 따라 정리해보았다 !</p>\n<h2>lnline Style</h2>\n<p>일반적인 방식으로 기존에 사용하던 것과 같이 태그에 직접 style을 적용하는 방법이다.</p>\n<p>인라인 스타일로 적용하는 경우 일일히 수정해줘야 하고, 리액트의 경우 state가 변경될 때 마다 렌더링 된다는 단점이 있다.</p>\n<p>하지만, 인라인 스타일링의 경우 우선순위가 가장 높다는 장점이 있다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">&lt;h1 style={{ padding: &#39;10px&#39; }}&gt;\n\t하이요 :)\n&lt;/h1&gt;</code>\n        </deckgo-highlight-code>\n<h2><strong>External Stylesheet</strong></h2>\n<p>일반적인 css 파일에 스타일을 적용하는 방법으로 기존에 사용하던것과 마찬가지로 css파일을 import 해주면 된다 !</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">import &#39;./App.css&#39;;\n\nfunction App() {\n\treturn (\n\t\t&lt;&gt;\n\t\t\t&lt;h1 className=&quot;h1-styled&quot;&gt;하이요 :)&lt;/h1&gt;\n\t\t&lt;/&gt;\n\t)\n}\n</code>\n        </deckgo-highlight-code>\n<h2><strong>CSS Modules</strong></h2>\n<p>위에서 소개한 외부 스타일 시트를 사용하는 방법은 React 앱의 규모가 커짐에 따라 css 이름이 겹치고 지정하는데 어려움을 겪을 수 있다. 기본적으로 글로벌 네임 스페이스(global namespace)를 사용하기 때문에, 만약 2개의 css 파일에 동일한 클래스에 대한 스타일이 적용되어 있다면, 해당 클래스가 적용된 엘리먼드는 2개의 스타일에 모두 영향을 받게 된다.</p>\n<p>이 문제를 해결하기 위한 방법으로 css파일에 고유의 네임 스페이스를 부여해주는 css 모듈 (CSS Modules)이라는 기법이 있다. React 컴포넌트에 Css 모듈을 통해서 스타일을 적용하는 방법은 다음과 같다.</p>\n<ul>\n<li><code>.css</code> 이 아닌 <code>.module.css</code> 확장자를 사용해야함.</li>\n<li><code>.module.css</code> import시 해당 파일의 확장자를 모두 작성해줘야함. (<code>import styles from ./button.module.css</code> )</li>\n<li>엘리먼트에 <code>className</code> 속성을 지정해 줄 때 어느 모듈 소속인지 명시해 줘야함. (<code>styles.button</code> )</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">import React from &#39;react&#39;;\nimport styles from &#39;./button.module.css&#39;;\n\nfunction Button() {\n\treturn &lt;Button className={styles.button}&gt;버튼&lt;/Button&gt;\n}</code>\n        </deckgo-highlight-code>\n<h2>Styled-Components</h2>\n<p>css-in-js 를 지원하는 가장 대표적인 라이브러리로 가장 간편하고 인지도가 높은 편에 속한다.</p>\n<p>styled-components를 사용하면 className 컴포넌트에 사용하지 않아도 되고, 컴포넌트에 각각 다른 스타일을 적용하여 재사용 할 수 있다는 장점이 있다.</p>\n<p>✔️ 컴포넌트를 재사용해서 공통 코드를 줄일 수 있는 점이 내가 생각한 styled-component의 가장 큰 장점이다.</p>\n<p>❗ 하지만 css-in-js 방식인 만큼 javascript 코드를 css로 변환하는 과정이 포함되기 때문에, css-in-css보다는 렌더링 성능이 현저하게 저하된다는 단점이 있다.</p>\n<p>위의 장, 단점을 잘 비교하여 용도에 맞게 잘 사용해야겠다..!</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">import styled from &#39;styled-components&#39;;\n\nconst StyleContainer = styled.div`\n\tmargin: 10px;\n\tbackground-color: rgb(250, 250, 250);\n`;\n\nfunction App() {\n\treturn (\n\t\t&lt;&gt;\n\t\t\t&lt;StyledContainer/&gt;\t\t\n\t\t&lt;/&gt;\n\t)\n}</code>\n        </deckgo-highlight-code>\n<h3>전역 스타일링</h3>\n<p>styled-componenet로 전역 스타일(global style)을 정의하는 방법으로 createGlobalStyle()함수를 제공하고 있다.</p>\n<p>예를 들어 스타일 컴포넌트로 antd를 사용하고 있는 경우 antd에서 정의한 여러가지 스타일이 있는데, 이것들을 변경하고 싶은 경우 혹은 <code>body, h1</code> 등 엘리먼트에 기본 스타일을 적용하고 싶은 경우 유용하게 사용할 수 있다.</p>\n<p>아래는 내가 antd의 <code>Tabs</code> 의스타일을 변경하고 싶어 사용했던 방식이다. 아래와 같이 스타일을 적용한 컴포넌트를 잘 선언해주기만 하면 된다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">import { createGlobalStyle } from &#39;styled-components&#39;;\nimport { Tabs } from &#39;antd&#39;;\n\nconst TabAlignCenter = createGlobalStyle`\n  .ant-tabs-nav-wrap {\n    margin-top: 10px;\n  }\n`;\n\nfunction Container() {\n\treturn (\n\t\t&lt;&gt;\n\t\t\t&lt;TabAlignCenter&gt;\n\t\t\t\t&lt;Tabs defaultActiveKey=&#39;1&#39; centered&gt;\n\t          &lt;Tabs.TabPane tab=&quot;첫번째&quot; key=&quot;1&quot; /&gt;\n\t          &lt;Tabs.TabPane tab=&quot;첫번째&quot; key=&quot;2&quot; /&gt;\n\t\t\t\t&lt;/Tabs&gt;\n\t\t\t&lt;/TabAlignCenter&gt;\n\t\t&lt;/&gt;\n\t)\n}</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"[React] CSS in React","date":"30 Mar, 2022","summary":"React의 다양한 css 사용 방법 정리","categories":["React"]}}},{"node":{"id":"744c7796-b179-5418-9f80-c5dc5a93dfc8","fields":{"slug":"/react/useEffect/"},"html":"<h1>들어가며</h1>\n<blockquote>\n<p>useEffect라는 Hook을 사용하여 컴포넌트가 마운트 됐을 때 (처음 나타났을 때), 언마운트 됐을 때(사라질 때), 그리고 업데이트 될 때 (특정 props가 바뀔 때) 특정 작업을 처리하는 방법 정리해보았다.</p>\n</blockquote>\n<h2>마운트 / 언마운트</h2>\n<blockquote>\n<p>컴포넌트의 마운트, 언마운트 관리하기</p>\n</blockquote>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">useEffect(() =&gt; {\n\tconsole.log(&#39;컴포넌트가 화면에 나타남&#39;);\n\treturn () =&gt; {\n\t\tconsole.log(&#39;컴포넌트가 화면에서 사라짐.&#39;);\n\n}, []);</code>\n        </deckgo-highlight-code>\n<p><code>useEffect</code> 의 첫번째 인자는 함수, 두번째 인자는 배열 (<code>deps</code>) 넣으면 됨.</p>\n<p>배열에 조건이 없는 경우 컴포넌트가 마운트 됐을 때만 <code>useEffect</code>에 등록한 함수가 호출 됨.</p>\n<p><code>useEffect</code> 에서는 함수(<code>cleanup</code>)를 반환할 수 있고 이 함수는 <code>useEffect</code> 에 대한 뒷정리를 해주는데 <code>deps</code> 가 비어있는 경우 컴포넌트가 사라질 때 호출 됨. <code>componentDidUnMount</code> 역할을 함</p>\n<p>마운트 시에 주로하는 작업</p>\n<ul>\n<li><code>props</code> 로 받은 컴포넌트의 로컬 상태로 설정</li>\n<li>외부 API 요청 (REST API 등)</li>\n<li><mark>라이브러리 사용</mark> (D3, Video.js 등)</li>\n<li>setInterval 을 통한 반복작업 혹은 setTimeout 을 통한 작업 예약</li>\n</ul>\n<p>언마운트 시에 하는 작업</p>\n<ul>\n<li>setInterval, setTimeout 을 사용하여 등록한 작업들 clear 하기 (clearInterval, clearTimeout)</li>\n<li>라이브러리 인스턴스 제거</li>\n</ul>\n<h2>deps에 특정 조건 넣기</h2>\n<p>배열에 요소가 있으면 <code>componentDidMount</code> + <code>componentDidUpdate</code> 역할을 함</p>\n<p>컴포넌트가 처음 마운트 될 때, 지정한 값이 바뀔 때, 언마운트 될 때 호출됨.</p>\n<p><code>useEffect</code> 안에서 사용하는 <code>props</code> 가 있는 경우 <code>useEffect</code> 의 <code>deps</code> 에 넣어주어야함. 아니면 <code>props</code> 가 최신상태를 유지하지 못함.</p>\n<p>배열(<code>deps</code>) 인자에 <code>state</code> 말고도 모든 업데이트 조건 추가 가능</p>\n<h2>deps 파라미터 생략하기</h2>\n<p><code>deps</code> 를 생략하는 경우 컴포넌트가 리렌더링 될 떄 마다 호출됨.</p>","frontmatter":{"title":"[React] useEffect","date":"20 Mar, 2022","summary":"useEffect의 생명 주기 별 특정 작업을 처리하는 방법 정리","categories":["React"]}}}]}},"pageContext":{"fieldValue":"React","totalCount":2}},
    "staticQueryHashes": ["3764592887"]}
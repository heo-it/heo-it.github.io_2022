{"componentChunkName":"component---src-templates-category-template-tsx","path":"/category/React/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"4dde4d4c-e97c-559a-90c5-940531a690ba","fields":{"slug":"/react/useEffect/"},"html":"<h1>들어가며</h1>\n<blockquote>\n<p>useEffect라는 Hook을 사용하여 컴포넌트가 마운트 됐을 때 (처음 나타났을 때), 언마운트 됐을 때(사라질 때), 그리고 업데이트 될 때 (특정 props가 바뀔 때) 특정 작업을 처리하는 방법 정리하였습니다.</p>\n</blockquote>\n<h2>마운트 / 언마운트</h2>\n<blockquote>\n<p>컴포넌트의 마운트, 언마운트 관리하기</p>\n</blockquote>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">useEffect(() =&gt; {\r\n\tconsole.log(&#39;컴포넌트가 화면에 나타남&#39;);\r\n\treturn () =&gt; {\r\n\t\tconsole.log(&#39;컴포넌트가 화면에서 사라짐.&#39;);\r\n\r\n}, []);</code>\n        </deckgo-highlight-code>\n<p><code>useEffect</code> 의 첫번째 인자는 함수, 두번째 인자는 배열 (<code>deps</code>) 넣으면 됨.</p>\n<p>배열에 조건이 없는 경우 컴포넌트가 마운트 됐을 때만 <code>useEffect</code>에 등록한 함수가 호출 됨.</p>\n<p><code>useEffect</code> 에서는 함수(<code>cleanup</code>)를 반환할 수 있고 이 함수는 <code>useEffect</code> 에 대한 뒷정리를 해주는데 <code>deps</code> 가 비어있는 경우 컴포넌트가 사라질 때 호출 됨. <code>componentDidUnMount</code> 역할을 함</p>\n<p>마운트 시에 주로하는 작업</p>\n<ul>\n<li><code>props</code> 로 받은 컴포넌트의 로컬 상태로 설정</li>\n<li>외부 API 요청 (REST API 등)</li>\n<li><mark>라이브러리 사용</mark> (D3, Video.js 등)</li>\n<li>setInterval 을 통한 반복작업 혹은 setTimeout 을 통한 작업 예약</li>\n</ul>\n<p>언마운트 시에 하는 작업</p>\n<ul>\n<li>setInterval, setTimeout 을 사용하여 등록한 작업들 clear 하기 (clearInterval, clearTimeout)</li>\n<li>라이브러리 인스턴스 제거</li>\n</ul>\n<h2>deps에 특정 조건 넣기</h2>\n<p>배열에 요소가 있으면 <code>componentDidMount</code> + <code>componentDidUpdate</code> 역할을 함</p>\n<p>컴포넌트가 처음 마운트 될 때, 지정한 값이 바뀔 때, 언마운트 될 때 호출됨.</p>\n<p><code>useEffect</code> 안에서 사용하는 <code>props</code> 가 있는 경우 <code>useEffect</code> 의 <code>deps</code> 에 넣어주어야함. 아니면 <code>props</code> 가 최신상태를 유지하지 못함.</p>\n<p>배열(<code>deps</code>) 인자에 <code>state</code> 말고도 모든 업데이트 조건 추가 가능</p>\n<h2>deps 파라미터 생략하기</h2>\n<p><code>deps</code> 를 생략하는 경우 컴포넌트가 리렌더링 될 떄 마다 호출됨.</p>","frontmatter":{"title":"[React] useEffect","date":"20 Mar, 2022","summary":"useEffect라는 Hook을 사용하여 컴포넌트가 마운트 됐을 때 (처음 나타났을 때), 언마운트 됐을 때(사라질 때), 그리고 업데이트 될 때 (특정 props가 바뀔 때) 특정 작업을 처리하는 방법 정리하였습니다.","categories":["React"]}}}]}},"pageContext":{"fieldValue":"React","totalCount":1}},"staticQueryHashes":["3764592887"]}
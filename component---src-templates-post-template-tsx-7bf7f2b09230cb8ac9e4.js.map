{"version":3,"file":"component---src-templates-post-template-tsx-7bf7f2b09230cb8ac9e4.js","mappings":"qKAEA,IAoBA,GApBc,E,QAAA,yX,oBCwBd,EAlB2D,YAEvD,IADFA,EACC,EADDA,WAEA,OACEC,EAAAA,EAAAA,IAAAA,MAAAA,KAEID,EAAWE,KAAI,SAACC,GACd,OACEF,EAAAA,EAAAA,IAACG,EAAD,CAAUC,IAAKF,IACbF,EAAAA,EAAAA,IAACK,EAAAA,KAAD,CAAMC,GAAE,aAAeJ,GAAaA,U,yFCf3C,IAAMK,GAAO,2+C,UCepB,EARyD,YAErD,IADFC,EACC,EADDA,KAEA,OACER,EAAAA,EAAAA,IAACO,EAAD,CAASE,wBAAyB,CAAEC,OAAQF,M,UCXzC,IAAMG,GAAY,6JAQZC,GAAc,4HAMdC,GAAW,oH,UCaxB,EAfyD,YAErD,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMhB,EACZ,EADYA,WAEb,OACEC,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAACW,EAAD,KAAeG,IACfd,EAAAA,EAAAA,IAACY,EAAD,MACEZ,EAAAA,EAAAA,IAACa,EAAD,KAAcE,IACdf,EAAAA,EAAAA,IAACgB,EAAAA,EAAD,CAAcjB,WAAYA,MAE5BC,EAAAA,EAAAA,IAAAA,KAAAA,Q,UCrBC,IAAMiB,GAAmB,OAAOC,EAAAA,EAAP,qBAAHC,CAAAA,KAAAA,UAAAA,OAAAA,6CCW7B,EANqD,YAEjD,IADFC,EACC,EADDA,UAEA,OAAOpB,EAAAA,EAAAA,IAACiB,EAAD,CAAkBI,MAAOD,EAAWE,IAAI,gBCgCjD,EA5BmC,WACjC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAuB,MAAnBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAsC,CAC1CC,IAZM,gCAaNC,KAZO,0BAaP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBnC,EAAgB,KAAXoC,EAAW,KACnDb,EAAWc,aAAarC,EAAKoC,MAG/BjB,EAAQG,QAAQgB,YAAYf,MAC3B,KAEI3B,EAAAA,EAAAA,IAAAA,MAAAA,CAAK2C,IAAKpB,KC8BnB,EArD2D,YAMvD,IACF,EADC,EALDqB,KACEC,kBACEC,MAgBM,GAXRC,KACEvC,EAFJ,EAEIA,KAFJ,IAGIwC,YACElC,EAJN,EAIMA,MACAC,EALN,EAKMA,KACAhB,EANN,EAMMA,WAEqBkD,EAR3B,EAOMC,UACEC,gBAAmBF,gBAM3B,OACEjD,EAAAA,EAAAA,IAACoD,EAAAA,EAAD,CAAQtC,MAAOA,IACbd,EAAAA,EAAAA,IAACqD,EAAD,CAAWjC,UAAW6B,KACtBjD,EAAAA,EAAAA,IAACsD,EAAD,CAAiBxC,MAAOA,EAAOC,KAAMA,EAAMhB,WAAYA,KACvDC,EAAAA,EAAAA,IAACuD,EAAD,CAAa/C,KAAMA,KACnBR,EAAAA,EAAAA,IAAAA,KAAAA,OACAA,EAAAA,EAAAA,IAACwD,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/CategoryList.style.tsx","webpack://gatsby-starter-default/./src/components/Post/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.style.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/Description.style.tsx","webpack://gatsby-starter-default/./src/components/Post/Description.tsx","webpack://gatsby-starter-default/./src/components/Post/PostImage.style.tsx","webpack://gatsby-starter-default/./src/components/Post/PostImage.tsx","webpack://gatsby-starter-default/./src/components/Post/Comment.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\r\n\r\nconst Category = styled.span`\r\n  margin-right: 0.6rem;\r\n  margin-bottom: 0.6rem;\r\n  text-transform: uppercase;\r\n  font-size: var(--size-300);\r\n\r\n  & a {\r\n    position: relative;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    padding: 0.2rem 0.6rem;\r\n    border: 1px solid rgba(230, 230, 230, 1);\r\n    border-radius: 4px;\r\n  }\r\n\r\n  & a:hover {\r\n    background-color: rgba(237, 85, 110, 0.7);\r\n    color: rgba(255, 255, 255, 1);\r\n  }\r\n`;\r\n\r\nexport default Category","import React, { FunctionComponent } from 'react'\r\nimport Category from './CategoryList.style'\r\nimport { Link } from 'gatsby'\r\n\r\ntype CategoryListProps = {\r\n  categories: string[]\r\n}\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  categories\r\n}) {\r\n  return (\r\n    <div>\r\n      {\r\n        categories.map((category: string) => {\r\n          return (\r\n            <Category key={category}>\r\n              <Link to={`/category/${category}`}>{category}</Link>\r\n            </Category>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryList","import styled from '@emotion/styled'\r\n\r\nexport const Content = styled.div`\r\n  margin: 0 auto;\r\n  padding: 2.5rem 0;\r\n  word-wrap: break-word;\r\n\r\n  h1 {\r\n    font-size: var(--size-600);\r\n  }\r\n\r\n  h2 {\r\n    font-size: var(--size-500);\r\n  }\r\n\r\n  h3 {\r\n    font-size: var(--size-400);\r\n  }\r\n\r\n  * + h1 {\r\n    margin-top: var(--size-900);\r\n  }\r\n\r\n  * + h2 {\r\n    margin-top: var(--size-800);\r\n  }\r\n\r\n  * + h3 {\r\n    margin-top: var(--size-700);\r\n  }\r\n\r\n  p {\r\n    font-size: var(--size-350);\r\n    margin: var(--size-400) 0;\r\n  }\r\n\r\n  ol,\r\n  ul {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    padding: 0 0 0 3rem;\r\n\r\n    p {\r\n      margin: 0.5rem 0;\r\n    }\r\n  }\r\n\r\n  ul {\r\n    list-style-type: disc;\r\n    font-size: var(--size-350);\r\n  }\r\n\r\n  ul ul {\r\n    list-style-type: circle;\r\n  }\r\n\r\n  ul ul ul {\r\n    list-style-type: square;\r\n  }\r\n\r\n  ol {\r\n    list-style-type: decimal;\r\n  }\r\n\r\n  hr {\r\n    margin: 2rem 0;\r\n  }\r\n\r\n  a {\r\n    font-weight: 700;\r\n  }\r\n\r\n  a:active,\r\n  a:hover {\r\n    outline-width: 0;\r\n  }\r\n\r\n  strong {\r\n    font-weight: 700;\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n    border-style: none;\r\n    border-radius: var(--size-400);\r\n  }\r\n\r\n  em {\r\n    font-size: 1.2rem;\r\n    font-style: italic;\r\n    display: block;\r\n    text-align: center;\r\n    margin: -1.5rem auto 0;\r\n    word-break: keep-all;\r\n  }\r\n\r\n  table {\r\n    display: table;\r\n    border-collapse: collapse;\r\n    margin: var(--size-400) 0;\r\n  }\r\n\r\n  thead {\r\n    display: table-header-group;\r\n    font-weight: 700;\r\n  }\r\n\r\n  tr {\r\n    display: table-row;\r\n  }\r\n\r\n  th,\r\n  td {\r\n    display: table-cell;\r\n    padding: var(--size-400);\r\n  }\r\n\r\n  blockquote {\r\n    margin: 0.7rem 0;\r\n    padding: 0.5rem 1.5rem;\r\n    background: rgb(242, 242, 242);\r\n\r\n    p {\r\n      margin: 0.5rem 0;\r\n    }\r\n  }\r\n\r\n  code {\r\n    margin: 0px 0.2rem 0px 0px;\r\n    padding: 0.2rem 0.3rem;\r\n    border-radius: 0.3rem;\r\n    background: rgb(230, 230, 230);\r\n    font-size: 95%;\r\n    font-family: 'Poppins', -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue,\r\n    helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif;\r\n  }\r\n\r\n  mark {\r\n    background-color: rgba(251, 238, 184, 1);\r\n    padding: 0.1rem;\r\n  }\r\n\r\n  @media (max-width: 55rem) {\r\n    width: 100%;\r\n    padding: 1.5rem 0;\r\n  }\r\n`;","import React, { FunctionComponent } from 'react'\r\nimport {\r\n  Content\r\n} from './PostContent.style'\r\n\r\ntype PostContentProps = {\r\n  html: string\r\n}\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({\r\n  html\r\n}) {\r\n  return (\r\n    <Content dangerouslySetInnerHTML={{ __html: html }}/>\r\n  )\r\n}\r\n\r\nexport default PostContent;","import styled from '@emotion/styled'\r\n\r\nexport const ContentTitle = styled.h1`\r\n  word-break: keep-all;\r\n  font-size: var(--size-600);\r\n  font-weight: 600;\r\n  padding: 1.5rem 0;\r\n  line-height: 130%;\r\n`\r\n\r\nexport const ContentDetails = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n\r\nexport const ContentDate = styled.span`\r\n  font-size: var(--size-350);\r\n  color: rgba(98, 92, 96, 0.7);\r\n`","import React, { FunctionComponent } from 'react'\r\nimport {\r\n  ContentTitle,\r\n  ContentDetails,\r\n  ContentDate,\r\n} from './Description.style'\r\nimport CategoryList from 'components/Post/CategoryList'\r\n\r\ntype DescriptionProps = {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst Description: FunctionComponent<DescriptionProps> = function ({\r\n  title, date, categories\r\n}) {\r\n  return (\r\n    <>\r\n      <ContentTitle>{title}</ContentTitle>\r\n      <ContentDetails>\r\n        <ContentDate>{date}</ContentDate>\r\n        <CategoryList categories={categories} />\r\n      </ContentDetails>\r\n      <hr />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Description","import styled from '@emotion/styled'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\n\r\nexport const PostImageWrapper = styled(GatsbyImage)`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 8px;\r\n`","import React, { FunctionComponent } from 'react'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { PostImageWrapper } from './PostImage.style'\r\n\r\ntype PostImageProps = {\r\n  postImage: IGatsbyImageData\r\n}\r\n\r\nconst PostImage: FunctionComponent<PostImageProps> = function ({\r\n  postImage\r\n}) {\r\n  return <PostImageWrapper image={postImage} alt=\"Post Image\" />\r\n}\r\n\r\nexport default PostImage","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\ntype UtterancesAttributeType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'heo-it/heo-it.github.io'\r\n\r\nconst Comment: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>();\r\n\r\n  useEffect(() => {\r\n    if (element.current == null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtterancesAttributeType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <div ref={element} />\r\n}\r\n\r\nexport default Comment","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from 'components/Layout/Layout'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport PostDescription from 'components/Post/Description'\r\nimport PostImage from 'components/Post/PostImage'\r\nimport Comment from 'components/Post/Comment'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n  }\r\n}\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges\r\n    }\r\n  }\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n        }\r\n      },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Layout title={title}>\r\n      <PostImage postImage={gatsbyImageData} />\r\n      <PostDescription title={title} date={date} categories={categories} />\r\n      <PostContent html={html}/>\r\n      <hr />\r\n      <Comment />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 730)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default PostTemplate\r\n"],"names":["categories","___EmotionJSX","map","category","Category","key","Link","to","Content","html","dangerouslySetInnerHTML","__html","ContentTitle","ContentDetails","ContentDate","title","date","CategoryList","PostImageWrapper","GatsbyImage","process","postImage","image","alt","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","node","frontmatter","gatsbyImageData","thumbnail","childImageSharp","Layout","PostImage","PostDescription","PostContent","Comment"],"sourceRoot":""}